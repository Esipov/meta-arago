From 0cfabf5d6c20c8d91db026561db6c4624a1e7c3a Mon Sep 17 00:00:00 2001
From: Daniel Allred <d-allred@ti.com>
Date: Wed, 19 Aug 2015 16:01:26 -0500
Subject: [PATCH 2/5] monitor: update to support platform services

Added the capability for a platform to plugin
its own services, often legacy services for
compatibility purposes. Added these services
for the dra7xx platform.

Signed-off-by: Daniel Allred <d-allred@ti.com>
---
 core/arch/arm/plat-ti/api_monitor_index.h   | 54 ++++++++++++++++++++
 core/arch/arm/plat-ti/sm_platform_handler.S | 79 +++++++++++++++++++++++++++++
 core/arch/arm/plat-ti/sub.mk                |  1 +
 core/arch/arm/sm/sm.c                       |  5 ++
 core/arch/arm/sm/sm_a32.S                   | 14 +++++
 core/arch/arm/sm/sm_private.h               |  3 ++
 6 files changed, 156 insertions(+)
 create mode 100644 core/arch/arm/plat-ti/api_monitor_index.h
 create mode 100644 core/arch/arm/plat-ti/sm_platform_handler.S

diff --git a/core/arch/arm/plat-ti/api_monitor_index.h b/core/arch/arm/plat-ti/api_monitor_index.h
new file mode 100644
index 0000000..b06fb2c
--- /dev/null
+++ b/core/arch/arm/plat-ti/api_monitor_index.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2015, Texas Instruments
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES// LOSS OF USE, DATA, OR PROFITS// OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef __API_MONITOR_INDEX_H__
+#define __API_MONITOR_INDEX_H__
+
+// Number of APIs
+#define NB_MAX_API_MONITOR    10
+
+// Base Index of APIs
+#define API_MONITOR_BASE_INDEX    0x00000100
+
+// HyperVisor Start
+#define API_MONITOR_HYP_STARTHYPERVISOR_INDEX      API_MONITOR_BASE_INDEX + 0x00000002
+// Caches cleaning
+#define API_MONITOR_CACHES_CLEAN_INDEX             API_MONITOR_BASE_INDEX + 0x00000003
+// Write the L2 Cache Controller Auxiliary Control
+#define API_MONITOR_L2ACTLR_SETREGISTER_INDEX      API_MONITOR_BASE_INDEX + 0x00000004
+// Set the Data and Tag RAM Latency
+#define API_MONITOR_L2CACHE_SETLATENCY_INDEX       API_MONITOR_BASE_INDEX + 0x00000005
+// L2 Cache Prefetch Control Register
+#define API_MONITOR_L2PFR_SETREGISTER_INDEX        API_MONITOR_BASE_INDEX + 0x00000006
+// Set Auxiliary Control Register
+#define API_MONITOR_ACTLR_SETREGISTER_INDEX        API_MONITOR_BASE_INDEX + 0x00000007
+// AMBA IF mode
+#define API_MONITOR_WUGEN_MPU_SETAMBAIF_INDEX      API_MONITOR_BASE_INDEX + 0x00000008
+// Timer CNTFRQ register set
+#define API_MONITOR_TIMER_SETCNTFRQ_INDEX          API_MONITOR_BASE_INDEX + 0x00000009
+
+#endif // __API_MONITOR_INDEX_H__
diff --git a/core/arch/arm/plat-ti/sm_platform_handler.S b/core/arch/arm/plat-ti/sm_platform_handler.S
new file mode 100644
index 0000000..ffaeae4
--- /dev/null
+++ b/core/arch/arm/plat-ti/sm_platform_handler.S
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2015, Texas Instruments
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES// LOSS OF USE, DATA, OR PROFITS// OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <asm.S>
+#include <arm.h>
+#include <arm32_macros.S>
+#include "api_monitor_index.h"
+
+.global sm_platform_handler
+
+/*******************************************************************************
+ *  FUNCTION: sm_platform_handler
+ *
+ *  DESCRIPTION: This function is called when a particular Monitor function is
+ *               called by the NS environment. The service doesn't need to enter
+ *               the secure kernel but need to be executed in SE. Hence Monitor
+ *               is the appropriate environment
+ *
+ *  INPUTS: R0-R2 are the Secure Entry parameters, R12 the SMI Code Secure
+ *          Service
+ *          lr value is the Non-Secure return value
+ *
+ *  RETURN: API_HAL_RET_VALUE_SERVICE_UNKNWON if service is unknown.
+ *
+ *  NOTE: There are no secure information in the registers on exit, don't erase
+ *        them.
+ *        r3 is used to get the MMU Enable bit
+ ******************************************************************************/
+FUNC sm_platform_handler , :
+    /* Check if this is a monitor mode API or not */
+	cmp	r12, #0x200
+	bxhs	lr
+
+	/* Pop the complete stack, not going back to the calling fuction */
+	pop	{lr}
+	pop	{r0-r3}
+
+	ldr	r3, =API_MONITOR_ACTLR_SETREGISTER_INDEX
+	cmp	r12, r3
+	bne	monapi_MonitorDispatcher_TIMER_SetCntFrq
+	mcr	p15, 0, r0, c1, c0, 1
+	isb
+	b	monapi_MonitorDispatcher_Exit
+
+monapi_MonitorDispatcher_TIMER_SetCntFrq:
+	ldr	r3, =API_MONITOR_TIMER_SETCNTFRQ_INDEX
+	cmp	r12, r3
+	bne	monapi_MonitorDispatcher_Exit
+	mcr	p15, 0, r0, c14, c0, 0
+	isb
+
+monapi_MonitorDispatcher_Exit:
+	rfefd	sp!
+
+END_FUNC sm_platform_handler
diff --git a/core/arch/arm/plat-ti/sub.mk b/core/arch/arm/plat-ti/sub.mk
index 8ddc2fd..090ae86 100644
--- a/core/arch/arm/plat-ti/sub.mk
+++ b/core/arch/arm/plat-ti/sub.mk
@@ -1,2 +1,3 @@
 global-incdirs-y += .
 srcs-y += main.c
+srcs-y += sm_platform_handler.S
diff --git a/core/arch/arm/sm/sm.c b/core/arch/arm/sm/sm.c
index ca30f35..b2656fd 100644
--- a/core/arch/arm/sm/sm.c
+++ b/core/arch/arm/sm/sm.c
@@ -111,3 +111,8 @@ void sm_set_entry_vector(void *entry_vector)
 {
 	sm_entry_vector = entry_vector;
 }
+
+/* May be overridden in platform specific code */
+__weak void sm_platform_handler(void)
+{
+}
diff --git a/core/arch/arm/sm/sm_a32.S b/core/arch/arm/sm/sm_a32.S
index 9cdd43a..c310025 100644
--- a/core/arch/arm/sm/sm_a32.S
+++ b/core/arch/arm/sm/sm_a32.S
@@ -139,9 +139,23 @@ UNWIND(	.cantunwind)
 	orr	r0, r0, #(SCR_NS | SCR_FIQ) /* Set NS and FIQ bit in SCR */
 	write_scr r0
 
+	dsb
+	isb
+
 	b	.smc_exit
 
 .smc_ret_to_sec:
+	/*
+	 * Make a call for implementing any platform specific monitor
+	 * mode functionality. We should only return here if the
+	 * platform doesn't recognize or implement the service. Therefore
+	 * the platform specific handler should return to the non-secure
+	 * world when complete.
+	 */
+	push	{lr}
+	bl	sm_platform_handler
+	pop	{lr}
+
 	bic	r1, r1, #(SCR_NS | SCR_FIQ)/* Clear NS and FIQ bit in SCR */
 	write_scr r1
 
diff --git a/core/arch/arm/sm/sm_private.h b/core/arch/arm/sm/sm_private.h
index 7de8434..ddfb97a 100644
--- a/core/arch/arm/sm/sm_private.h
+++ b/core/arch/arm/sm/sm_private.h
@@ -43,5 +43,8 @@ void sm_set_sec_fiq_entry(void);
 /* Sets return values for return to normal world */
 void sm_set_nsec_ret_vals(struct sm_reg_r0_to_r3 *regs, uint32_t r4);
 
+/* Weak symbol for platform specific monitor service handling */
+void sm_platform_handler(void);
+
 #endif /*SM_PRIVATE_H*/
 
-- 
2.9.3

